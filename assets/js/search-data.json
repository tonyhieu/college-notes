{
  
    
        "post0": {
            "title": "ICS 6B Sections 1.1-1.5",
            "content": "1.1: Propositions and logical operations . Proposition: A statement that is either true or false Does not include commands (Shut the door!) or questions (What time is it?) | Propositions have a truth value, can be either: true, false, unknown, or a matter of opinion | . | A compound proposition is the combination of propositions using a logical operator ∧ represents “and”; p ∧ q is true if both p and q are true AKA conjunction operator | Truth table: | . | ∨ represents “or”; p ∨ q is true if either p or q are true AKA disjunction operator | Truth Table: | . | In English, “or” is typically used to represent “either/or”, or exclusive or (represented by ⊕), where both conditions cannot be true at the same time (She is eating or running) ∨ represents inclusive or where both conditions CAN be true at the same time | . | ¬ represents negation, or NOT; ¬True == False and ¬False == True | . | . 1.2 Evaluating compound propositions . Compound propositions can have more than one operation Order of operations w/o parantheses: ¬ (not), ∧ (and), ∨ (or) | Good practice to use parantheses | . | Truth tables will contain 2n rows for n variables(2 options for each variable) | Rightmost variable is filled in with TFTF…, leftmost is filled in with TTFF…; T and F alternates based on column number where rightmost column = 1 | . | Example of a truth table with intermediate steps: | . 1.3 Conditional statements . Conditional operations are represented with the symbol → p → q is read as “if p then q” | Truth table: | Think of it as a contract; if condition one is fulfilled, then the second condition HAS to be fulfilled, but if condition one is not fulfilled, then the second condition can either be fulfilled or not. | Different ways to express conditional operations: | p only if q is also p → q; most confusing one | . | Related conditional statements include the contrapositive, converse, and inverse The converse of p → q is q → p | The contrapositive of p → q is ¬q → ¬p | The inverse of p → q is ¬p → ¬q | . | Biconditional operations are represented with ↔ p ↔ q stands for “p if and only if q” - AKA true if p == q and false if not | If and only if can be represented with iff | . | Conditional and biconditional operations can be used in conjunction with other operations ∧, ∨, and ¬ takes precedence before → or ↔ | . | . 1.4 Logical equivalence . A tautology is a compound proposition that is always true, while a contradiction is a compound proposition that is always false p ∨ ¬p is a tautology, while p ∧ ¬p is a contradiction | . | Logical equivalence | .",
            "url": "https://tonyhieu.github.io/college-notes/ics6b/reading/fall22-23/markdown/2022/09/25/ics6b-reading.html",
            "relUrl": "/ics6b/reading/fall22-23/markdown/2022/09/25/ics6b-reading.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Sept 23 ICS 6B Lecture",
            "content": "Talked about structure of class. Not much else. .",
            "url": "https://tonyhieu.github.io/college-notes/ics6b/lecture/fall22-23/markdown/2022/09/23/ics6b-lecture.html",
            "relUrl": "/ics6b/lecture/fall22-23/markdown/2022/09/23/ics6b-lecture.html",
            "date": " • Sep 23, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Sept 22 ICS 32A Lecture",
            "content": "Intro to Python . First 20 minutes - going over data types, errors, zzz | “Floats represent really big or really small numbers”, 64 bit in Python | . type(type(4)) ==&gt; &lt;class &#39;type&gt; . // represents integer, or floor, division | . 16 // 5 == 3; 16.0 // 5.0 == 3.0 . Precedence and Associativity: Order of operations, PEMDAS Ex. Subtraction is “left associative” meaning that it goes left to right; exponentiation is “right associative” | . | . 16 - 5 * 3 == 1 # Precedence 16 - 5 - 3 == 8 # Left Associative 2 ** 3 ** 2 == 2^9 == 512 # Right Associative . Statement: Doesn’t return anything, changes a variable or any piece of data (such as x = 3) | .",
            "url": "https://tonyhieu.github.io/college-notes/ics32a/lecture/fall22-23/markdown/2022/09/22/ics32a-lecture.html",
            "relUrl": "/ics32a/lecture/fall22-23/markdown/2022/09/22/ics32a-lecture.html",
            "date": " • Sep 22, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Sept 22 Humanities Core Seminar",
            "content": "Introductory Information . Odyssey discussion will start next Thursday | Office Hours with Dr. Morse are from 5-6 pm Includes Drop-In, Appointments thru Canvas, Zoom Pop-In | 1 hour of visits required per quarter | Office is in HIB 196 | . | Password for protected files/pdfs is “humcore” | . Lecture Information . Lectures go fast - look at lecture slides prior to class | Discusses weekly reading and talks about themes and topics | Modules contains tasks to do before lecture (example below; do “Read: xxx” before going to lecture) | . .",
            "url": "https://tonyhieu.github.io/college-notes/humcore/discussion/seminar/fall22-23/markdown/2022/09/22/humcore-seminar.html",
            "relUrl": "/humcore/discussion/seminar/fall22-23/markdown/2022/09/22/humcore-seminar.html",
            "date": " • Sep 22, 2022"
        }
        
    
  

  
  

  

  

  

  

  
  

  
  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://tonyhieu.github.io/college-notes/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}